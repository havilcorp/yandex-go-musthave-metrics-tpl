// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	metric_proto "github.com/havilcorp/yandex-go-musthave-metrics-tpl/pkg/proto/metric"
	mock "github.com/stretchr/testify/mock"
)

// MetricServer is an autogenerated mock type for the MetricServer type
type MetricServer struct {
	mock.Mock
}

// UpdateMetricBulk provides a mock function with given fields: _a0, _a1
func (_m *MetricServer) UpdateMetricBulk(_a0 context.Context, _a1 *metric_proto.UpdateMetricBulkRequest) (*metric_proto.UpdateMetricBulkResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMetricBulk")
	}

	var r0 *metric_proto.UpdateMetricBulkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *metric_proto.UpdateMetricBulkRequest) (*metric_proto.UpdateMetricBulkResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *metric_proto.UpdateMetricBulkRequest) *metric_proto.UpdateMetricBulkResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*metric_proto.UpdateMetricBulkResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *metric_proto.UpdateMetricBulkRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedMetricServer provides a mock function with given fields:
func (_m *MetricServer) mustEmbedUnimplementedMetricServer() {
	_m.Called()
}

// NewMetricServer creates a new instance of MetricServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetricServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MetricServer {
	mock := &MetricServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
