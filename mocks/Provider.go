// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/havilcorp/yandex-go-musthave-metrics-tpl/domain"

	mock "github.com/stretchr/testify/mock"
)

// Provider is an autogenerated mock type for the Provider type
type Provider struct {
	mock.Mock
}

// AddCounter provides a mock function with given fields: ctx, key, counter
func (_m *Provider) AddCounter(ctx context.Context, key string, counter int64) error {
	ret := _m.Called(ctx, key, counter)

	if len(ret) == 0 {
		panic("no return value specified for AddCounter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) error); ok {
		r0 = rf(ctx, key, counter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddCounterBulk provides a mock function with given fields: ctx, list
func (_m *Provider) AddCounterBulk(ctx context.Context, list []domain.Counter) error {
	ret := _m.Called(ctx, list)

	if len(ret) == 0 {
		panic("no return value specified for AddCounterBulk")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []domain.Counter) error); ok {
		r0 = rf(ctx, list)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddGauge provides a mock function with given fields: ctx, key, gauge
func (_m *Provider) AddGauge(ctx context.Context, key string, gauge float64) error {
	ret := _m.Called(ctx, key, gauge)

	if len(ret) == 0 {
		panic("no return value specified for AddGauge")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, float64) error); ok {
		r0 = rf(ctx, key, gauge)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddGaugeBulk provides a mock function with given fields: ctx, list
func (_m *Provider) AddGaugeBulk(ctx context.Context, list []domain.Gauge) error {
	ret := _m.Called(ctx, list)

	if len(ret) == 0 {
		panic("no return value specified for AddGaugeBulk")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []domain.Gauge) error); ok {
		r0 = rf(ctx, list)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllCounters provides a mock function with given fields: ctx
func (_m *Provider) GetAllCounters(ctx context.Context) (map[string]int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllCounters")
	}

	var r0 map[string]int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]int64); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllGauge provides a mock function with given fields: ctx
func (_m *Provider) GetAllGauge(ctx context.Context) (map[string]float64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllGauge")
	}

	var r0 map[string]float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]float64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]float64); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]float64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCounter provides a mock function with given fields: ctx, key
func (_m *Provider) GetCounter(ctx context.Context, key string) (int64, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for GetCounter")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGauge provides a mock function with given fields: ctx, key
func (_m *Provider) GetGauge(ctx context.Context, key string) (float64, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for GetGauge")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (float64, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) float64); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProvider creates a new instance of Provider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *Provider {
	mock := &Provider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
